{
	"variables": {},
	"fxa63001tu41d": {
		"paused": false,
		"id": "fxa63001tu41d",
		"reference": "",
		"author": "abdul",
		"group": "iot",
		"icon": "ti ti-microchip",
		"color": "",
		"version": "1",
		"readme": "",
		"url": "https://",
		"name": "Abdul Flow",
		"components": {
			"cn63q37bcd": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<script src=\"https://cdn.socket.io/4.5.4/socket.io.min.js\"></script>\n</body>",
			"cnsojb6b6": "<script total>\n\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true, name: 'Debug' };\n\texports.inputs = [{ id: 'input', name: 'Log window' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status({ name: config.name, date: new Date(), data: output });\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n</style>\n\n<readme>\nThe component prints incoming data into the JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name\" class=\"m\">Name</div>\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"far fa-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<div data---=\"box__common.$debug__if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:fa fa-bug;zindex:5\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"fa fa-trash-alt\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></div>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"fa fa-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(data.data, '\\t'))));\n\t\t};\n\n\t});\n\n</script>",
			"cnui432a79": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"far fa-window-restore\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(laststatus, null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"co7g09ff86": "<script total>\n\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'far fa-clock-o';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.interval__type:number;required:1\">Interval</div>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <span data-bind=\"CONFIG.interval__text__empty\"></span> ms</div>\n\t</div>\n</body>",
			"c2skhf5f0f": "<script total>\n\n\texports.name = 'Telemetry';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fa fa-rss-square';\n\texports.author = 'Martin Smola';\n\texports.config = { paths: {}, interval: null, format: 'dd.MM.yyyy HH:mm:ss' }; // { name, path }\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tvar last = { items: [], format: config.format || 'dd.MM.yyyy HH:mm:ss' };\n\t\tvar interval;\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst format = (val, type) => {\n\t\t\tswitch(type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn '' + val;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBolean(val);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn Number(val);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tvar dt = NOW;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdt = new Date(val).format(config.format || 'dd.MM.yyyy HH:mm:ss');\n\t\t\t\t\t} catch(e) {};\n\t\t\t\t\treturn dt;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tconst data = config.extend ? last : { items: [], format: config.format || 'dd.MM.yyyy HH:mm:ss' };\n\n\t\t\tconst props = Object.keys(config.paths).map(path => {\n\t\t\t\tvar split = config.paths[path].split('|').trim();\n\t\t\t\treturn { name: path, path: split[0], type: split[1] || 'string' }\n\t\t\t});\n\n\t\t\tfor (const prop of props) {\n\t\t\t\tvar val = get($.data, prop.path);\n\t\t\t\tif (val == undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (config.extend) {\n\t\t\t\t\tvar item = data.items.findItem('key', prop.name);\n\t\t\t\t\tif (item) {\n\t\t\t\t\t\titem.value = format(val, prop.type);\n\t\t\t\t\t\titem.ts = NOW;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdata.items.push({ key: prop.name, value: format(val, prop.type), ts: NOW });\n\t\t\t}\n\n\t\t\tif (!interval)\n\t\t\t\tinstance.status(data);\n\t\t\telse\n\t\t\t\tlast = data;\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status({ items: [] });\n\t\t}\n\n\t\tinstance.configure = function() {\n\t\t\tclearInterval(interval);\n\t\t\tif (config.interval) {\n\t\t\t\tinterval = setInterval(() => instance.status(last), config.interval);\n\t\t\t} else\n\t\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tinstance.close = () => clearInterval(interval);\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .telemetry-item > span { float: right; font-size: 14px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component shows data in a template.\nHovering over the value shows the last update time.\nAssuming this incomming data:\n```javascript\n{\n\tspeed: 1,\n\tnested: { value: 2 },\n\tarray: [{ value: 3 }]\n}\n```\nThe paths bust be defined as:\n```\nspeed         // -> 1\nnested.value  // -> 2\narray.0.value // -> 3\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.interval__type:number__500\">Update interval (in ms)</div>\n\t\t<div class=\"help m\">Leave empty to update immediately when new data comes in.</div>\n\t\t<div data---=\"keyvalue__?.paths__placeholderkey:Type a property name;placeholdervalue:Type a path and press enter\">Properties to show in the template</div>\n\t\t<div class=\"help m\">Path supports js dot notation like `data.arr.0.value`, following is not supported `data.arr[0].value`<br>Supports datatypes in the `path` column: `some.path | date`</div>\n\t\t<div data---=\"input__?.format\">Date format</div>\n\t\t<div class=\"help m\">default `dd.MM.yyyy HH:mm:ss`</div>\n\t\t<div data---=\"input__?.extend__type:checkbox\">Extend previous data?</div>\n\t\t<div class=\"help\">if checked the previous data will be extend instead of overwriten, useful when not all data comes in a single message</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"STATUS__template\" class=\"\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{foreach item in value.items}}\n\t\t\t\t\t<div class=\"telemetry-item\"><b class=\"mr5\">{{item.key}}: tttt</b><span title=\"{{item.ts | format(value.format)}}\">{{item.value}}</span></div>\n\t\t\t\t{{end}}\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"ce3klcf719": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ce61x806ce": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"ce7sd5d554": "<script total>\n\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '3';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"ce96c043e": "<script total>\n\n\texports.name = 'Subscribe';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'output') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\n\t\t\t\tinstance.send('data', data);\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_subscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%outputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\n\t</div>\n</settings>\n\n<readme>\nThe component subscribes to the specific `Output` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\n\t</header>\n</body>",
			"range": "<script total>\n\n\texports.id = 'range';\n\texports.name = 'Range';\n\texports.icon = 'fa fa-arrows-h';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\tvar inmin, inmax, outmin, outmax;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar val = parseFloat(typeof(data) === 'object' ? U.get(data, config.property) : data);\n\n\t\t\tif (!val || typeof val !== 'number') {\n\t\t\t\tinstance.throw('Value \"{0}\" is not a number'.format(val.toString().substring(0, 20)));\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (val < inmin) {\n\t\t\t\t$.data = inmin;\n\t\t\t} else if (val > inmax)\n\t\t\t\t$.data = inmax;\n\t\t\telse {\n\t\t\t\tdata = outmin + (outmax - outmin) * (val - inmin) / (inmax - inmin);\n\t\t\t\t$.data = config.round ? Math.round(data) : data;\n\t\t\t}\n\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinmin = parseFloat(config.input_min || 0);\n\t\t\tinmax = parseFloat(config.input_max || 1023);\n\t\t\toutmin = parseFloat(config.output_min || 0);\n\t\t\toutmax = parseFloat(config.output_max || 100);\n\t\t\tinstance.status(`${inmin} - ${inmax} --> ${outmin} - ${outmax}`);\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.property__placeholder:e.g. path.to.property\" class=\"m\">Property (unless the data is the value itself)</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_min__type:number\" class=\"m\">Input min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.input_max__type:number\" class=\"m\">Input max (defaults to 1023)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_min__type:number\" class=\"m\">Output min (defaults to 0)</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.output_max__type:number\" class=\"m\">Output max (defaults to 100)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<div data---=\"input__?.round__type:checkbox\">Round output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text\"></footer>\n</body>",
			"c5dxrb9e03": "<script total>\r\n\texports.name = 'RPIgpio';\r\n\texports.author = 'Thecoolpeople';\r\n\texports.group = 'Raspberry';\r\n\texports.icon = 'fab fa-raspberry-pi';\r\n\texports.version = '1';\r\n\texports.config = {};\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\r\n\r\n\texports.npm = ['rpi-gpio'];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar RPI = require('rpi-gpio');\r\n\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tlet bit = $.data;\r\n\r\n\t\t\tif (config.read_write && config.gpiokey) {\r\n\r\n\t\t\t\tswitch (config.read_write) {\r\n\t\t\t\t\tcase 'write':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_OUT, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.write(config.gpiokey, !!bit, function(err) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: !!bit });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase 'read':\r\n\t\t\t\t\t\tRPI.setup(config.gpiokey, RPI.DIR_IN, RPI.EDGE_NONE, function(err) {\r\n\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tRPI.read(config.gpiokey, function(err, val) {\r\n\t\t\t\t\t\t\t\tif (err)\r\n\t\t\t\t\t\t\t\t\t$.send('error', err + '');\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t$.send('output', { pin: config.gpiokey, value: val });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.destroy();\r\n\r\n\t\t};\r\n\t};\r\n</script>\r\n\r\n<readme>\r\n# GPIO\r\n\r\n__Write mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the component to set the GPIO to HIGH\r\n- Send false to the component to set the GPIO to LOW\r\n\r\n__Read mode__:\r\n\r\n- Select the GPIO you want\r\n- Set the read/write option to write\r\n- Send true to the node so read the state of the gpio\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.gpiokey__dirsource:3|GPIO2-SDA_I2C,5|GPIO3-SCL_I2C,7|GPIO4,29|GPIO5,31|GPIO6,26|GPIO7-CE0_N,24|GPIO8-CE1_N,21|GPIO9-MISO,19|GPIO10-MOSI,23|GPIO11-SCLK,32|GPIO12,33|GPIO13,8|GPIO14-UART0_TXD,10|GPIO15-UART0_RXT,36|GPIO16,11|GPIO17,12|GPIO18-PCM_CLK,35|GPIO19,38|GPIO20,40|GPIO21,15|GPIO22,16|GPIO23,18|GPIO24,22|GPIO25,37|GPIO26,13|GPIO27;required:1\">GPIO</div>\r\n\t\t<div data---=\"input__?.read_write__dirsource:read|read,write|write;required:1\">read/write</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>Raspberry GPIO\r\n\t</header>\r\n</body>",
			"c5nc4c74b": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"c6n8c4704c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cmahv5f172": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"cr6o36cb45": "<script total>\n\n\texports.name = 'Redirect';\n\texports.icon = 'fa fa-share';\n\texports.group = 'REST API';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar url = data.redirect || config.redirect;\n\t\t\tif (url && $.refs.controller)\n\t\t\t\t$.refs.controller.redirect(url, data.permanent === true || (!data.permanent === false && config.permanent === true) ? true : false);\n\n\t\t\t$.destroy();\n\t\t\t!url && instance.throw('No Redirect URL specified.');\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\nIncomming data have higher priority than the values set in the Configuration form.\nBoth the `url` and `permanent` are optional.\n```js\n{\n\tredirect: 'https://example.com',\n\tpermanent: true|false\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.redirect\" class=\"m\">Redirect URL</div>\n\t\t<div data---=\"input__?.permanent\">Permanent redirect</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<script>\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"csjku55f5c": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"c0qtib79af": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"crcb881b7d": "<script total>\n\n\texports.name = 'Tangular';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Templates';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar template;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\ttry {\n\t\t\t\t$.data = template(data, $);\n\t\t\t} catch(e) { $.data = ''; }\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttemplate = Tangular.compile(config.template || '');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nUses server-side implementation of [Tangular](https://docs.totaljs.com/components/40d06002lm50c/)\n**Example:**\nIncomming data\n```js\n{\n\tapp_name: 'Total.js Flow'\n}\n```\nTemplate\n```\nApp name: {{ app_name }}\n```\n\n$ --> {MessageInstance} https://docs.totaljs.com/total4/40844001ni51c/\nIn the example bellow, the $.refs.controller is only available if the message was created by the Route component\n```\nURL: {{ $.refs.controller.url }}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Template:</div>\n\t\t<div data---=\"codemirror__?.template__type:html;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<script>\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cheerio": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// instance : Component instance\\n// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($.instance,$$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('instance','$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// instance : component instance\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"ctatxfa4c4": "<script total>\n  exports.name = \"MQTT Broker\";\n  exports.icon = \"fa fa-exchange-alt\";\n  exports.group = \"MQTT\";\n  exports.config = {\n    host: \"localhost\",\n    port: 1884,\n    portws: 8884,\n    secure: false,\n  };\n  exports.outputs = [{ id: \"output\", name: \"Messages\" }];\n  exports.author = \"Martin Smola\";\n  exports.version = \"3\";\n  exports.npm = [\"mqtt\"];\n  exports.flags = [\"mqttbroker\"];\n\n  exports.make = function (instance, config) {\n    const mqtt = require(\"mqtt\");\n    var client;\n    const subscribtions = {};\n    const aedes = require(\"aedes\")();\n    const server = require(\"net\").createServer(aedes.handle);\n    const httpServer = require(\"http\").createServer();\n    const ws = require(\"websocket-stream\");\n    MQTT_Port = 1884;\n    const wsPort = 8884;\n    server.listen(MQTT_Port, function () {\n      console.log(\"Aedes MQTT server started and listening on port\", MQTT_Port);\n    }),\n      ws.createServer({ server: httpServer }, aedes.handle);\n    httpServer.listen(wsPort, function () {\n      console.log(\"websocket server listening on port \", wsPort);\n    });\n\n    const state = () => {\n      var obj;\n      if (!client) {\n        obj = {\n          connected: false,\n          connecting: false,\n          disconnected: true,\n          disconnnecting: false,\n          status: \"disconnected\",\n        };\n      } else {\n        const { connected, disconnecting, reconnecting } = client;\n        obj = {\n          connecting: client.stream ? client.stream.connecting : false,\n          connected,\n          disconnecting,\n          reconnecting,\n        };\n        const current = Object.keys(obj).filter((s) => obj[s]);\n        obj.status = current.length ? current[0] : \"disconnected\";\n      }\n\n      instance.state = {\n        status: obj.status,\n        name: config.host + \":\" + config.port,\n        websocket: config.host + \":\" + config.portws,\n      };\n      instance.status(instance.state);\n      return obj;\n    };\n\n    instance.configure = function () {\n      disconnect(connect);\n    };\n\n    instance.close = function () {\n      disconnect(notifypubsub);\n    };\n\n    instance.configure();\n\n    function disconnect(callback) {\n      if (!client) return callback && callback();\n\n      if (client.end) client.end(true, cb);\n      else cb();\n\n      function cb() {\n        client.removeAllListeners();\n        client = null;\n        callback && callback();\n      }\n    }\n\n    function connect() {\n      state();\n\n      var broker = config.secure\n        ? \"mqtts://\"\n        : \"mqtt://\" + config.host + \":\" + config.port;\n      config.name = \"[MQTT] \" + config.host + \":\" + config.port;\n      var opt = CLONE(config);\n      delete opt.auth;\n      client = mqtt.connect(broker, opt);\n\n      client.on(\"connect\", function () {\n        state();\n        notifypubsub();\n      });\n\n      client.on(\"reconnect\", function () {\n        state();\n      });\n\n      client.on(\"message\", function (topic, message) {\n        message = message.toString();\n        if (message[0] === \"{\" || message[0] === \"[\")\n          message = message.parseJSON(true);\n\n        onmessage(topic, message);\n      });\n\n      client.on(\"close\", function (err) {\n        console.log(config.name + \" close\", err);\n        state();\n      });\n\n      client.on(\"error\", function (err) {\n        console.log(config.name + \" error\", err);\n        state();\n      });\n    }\n\n    function onmessage(topic, message) {\n      let ts = new Date();\n      for (const sub in subscribtions) {\n        var match = mqttWildcard(topic, sub);\n        if (match) {\n          const ids = subscribtions[sub];\n          const len = ids.length;\n          for (let i = 0; i < len; i++) {\n            const com = instance.main.find(ids[i]);\n            com && com.onmessage(topic, message, match, ts);\n          }\n        }\n      }\n      instance.send(\"output\", { topic, message, ts });\n    }\n\n    instance.publish = function (topic, message, options) {\n      var isstring = typeof message === \"string\";\n      var data = \"\";\n      if (isstring) data = message;\n      else\n        try {\n          data = JSON.stringify(message);\n        } catch (e) {}\n\n      client &&\n        client.publish(topic, data, options, function (err) {\n          if (err) console.log(config.name + \" publish error\", err);\n        });\n    };\n\n    instance.subscribe = function (componentid, topic) {\n      var self = this;\n      subscribtions[topic] = subscribtions[topic] || [];\n      if (subscribtions[topic].indexOf(componentid) > -1) return;\n\n      client.subscribe(topic);\n      subscribtions[topic].push(componentid);\n    };\n\n    instance.unsubscribe = function (componentid, topic) {\n      var self = this;\n      var sub = subscribtions[topic];\n      if (sub) {\n        subscribtions[topic] = sub.remove(componentid);\n        client &&\n          client.connected &&\n          !subscribtions[topic].length &&\n          client.unsubscribe(topic);\n      }\n    };\n\n    function notifypubsub() {\n      var instances = instance.main\n        .instances()\n        .filter(\n          (i) =>\n            i.module.flags &&\n            i.module.flags.includes(\"mqttbroker-dep\") > -1 &&\n            i.config.broker === instance.id\n        );\n      for (let com of instances) com.configure();\n    }\n\n    // https://github.com/hobbyquaker/mqtt-wildcard\n    function mqttWildcard(topic, wildcard) {\n      if (topic === wildcard) {\n        return [];\n      } else if (wildcard === \"#\") {\n        return [topic];\n      }\n\n      var res = [];\n\n      var t = String(topic).split(\"/\");\n      var w = String(wildcard).split(\"/\");\n\n      var i = 0;\n      for (var lt = t.length; i < lt; i++) {\n        if (w[i] === \"+\") {\n          res.push(t[i]);\n        } else if (w[i] === \"#\") {\n          res.push(t.slice(i).join(\"/\"));\n          return res;\n        } else if (w[i] !== t[i]) {\n          return null;\n        }\n      }\n\n      if (w[i] === \"#\") {\n        i += 1;\n      }\n\n      return i === w.length ? res : null;\n    }\n  };\n</script>\n\n<readme> </readme>\n\n<style>\n  .CLASS footer {\n    padding: 10px;\n    font-size: 11px;\n  }\n  .CLASS footer > div > div {\n    height: 16px;\n  }\n  .CLASS footer b {\n    float: right;\n  }\n</style>\n\n<settings>\n  <div class=\"padding\">\n    <div class=\"row m\">\n      <div class=\"col-md-4\">\n        <div data---=\"input__?.host__placeholder:test.mosquitto.org;required:1\">\n          Hostname or IP address\n        </div>\n      </div>\n      <div class=\"col-md-4\">\n        <div data---=\"input__?.port__type:number;placeholder:1883;required:1\">\n          Port\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div data---=\"input__?.clientid\">Client id</div>\n        <div class=\"help m\">\n          Supports variables, example: \\`client_{device-id}\\`\n        </div>\n        <div data---=\"checkbox__?.secure\" class=\"m\">Secure (ssl)</div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div data---=\"checkbox__?.auth\" class=\"m\">Require Authorization</div>\n      </div>\n    </div>\n    <div class=\"row\" data-bind=\"?.auth__show:value\">\n      <div class=\"col-md-6\">\n        <div data---=\"input__?.username\" class=\"m\">Username</div>\n      </div>\n      <div class=\"col-md-6\">\n        <div\n          data---=\"input__?.password\"\n          data-jc-config=\"type:password\"\n          class=\"m\"\n        >\n          Password\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div data---=\"checkbox__?.lwt\" class=\"m\">LWT</div>\n      </div>\n    </div>\n    <div class=\"row\" data-bind=\"?.lwt__show:value\">\n      <div class=\"col-md-6\">\n        <div data---=\"input__?.lwttopic\">Last will topic</div>\n        <div class=\"help m\">\n          Supports variables, example: \\`lwt/{device-id}\\`\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n        <div data---=\"input__?.lwtmessage\">Last will message</div>\n        <div class=\"help m\">\n          Supports variables, example: \\`{device-id} is offline\\`\n        </div>\n      </div>\n    </div>\n  </div>\n</settings>\n\n<body>\n  <header><i class=\"ICON\"></i>NAME</header>\n  <footer>\n    <div data-bind=\"!STATUS__template__show\">\n      <script type=\"text/html\">\n        <div><b>{{ value.name }}</b>Name</div>\n        <div><b>{{ value.status }}</b>Status</div>\n        <div><b>{{ value.websocket }}</b>Websocket</div>\n      </script>\n    </div>\n  </footer>\n</body>\n",
			"mqttpublish": "<script total>\n\n\texports.id = 'mqttpublish';\n\texports.name = 'MQTT Publish';\n\texports.icon = 'fa fa-sign-out';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.inputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '3';\n\texports.flags = ['mqttbroker-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tvar broker = instance.main.find(config.broker);\n\t\t\tif (!broker)\n\t\t\t\tinstance.status('Broker not found');\n\t\t\telse\n\t\t\t\tinstance.status(broker.state.status);\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tvar broker = instance.main.find(config.broker);\n\t\t\tif (!broker)\n\t\t\t\treturn;\n\n\t\t\tbroker.publish($.data.topic, $.data.message);\n\t\t\t$.end();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('mqttbroker'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\n\t\tanswer(arr);\n\t};\n</script>\n\n<readme>\nMQTT Publish\n\nInput:\n```javascript\n{\n\ttopic: 'some/topic',\n\tmessage: { some: 'data' },\n\t// optional\n\toptions: {\n\t\tqos: 0|1|2,\n\t\tretain: true|false\n\t}\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer>div>div { height: 16px; }\n\t.CLASS footer b { float: right; }\n</style>\n\n<script>\n\tON('configure_mqttpublish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\" class=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value }}</b>Status</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cthmf243ca": "<script total>\n\n\texports.name = 'MQTT Subscribe';\n\texports.icon = 'fa fa-sign-in';\n\texports.group = 'MQTT';\n\texports.config = { broker: '' };\n\texports.outputs = [{ id: 'message', name: 'Message' }];\n\texports.author = 'Martin Smola';\n\texports.version = '3';\n\texports.flags = ['mqttbroker-dep'];\n\n\texports.make = function(instance, config) {\n\n\t\tvar subscribed = false;\n\t\tvar broker, topic;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscribe(instance.id, topic);\n\n\t\t\ttopic = config.topic;\n\n\t\t\tbroker = instance.main.find(config.broker);\n\n\t\t\tif (broker) {\n\t\t\t\tbroker.subscribe(instance.id, topic);\n\t\t\t\tsubscribed = true;\n\t\t\t\tinstance.status({ status: broker.state.status + ' (subscribed)', topic });\n\t\t\t} else {\n\t\t\t\tinstance.status({ status: 'Broker not found', topic });\n\t\t\t}\n\t\t};\n\n\t\tinstance.onmessage = function(topic, message, match, ts) {\n\t\t\tinstance.send('message', { topic, message, match, ts });\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (subscribed && broker)\n\t\t\t\tbroker.unsubscribe(instance.id, topic);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n\texports.call = function(data, answer) {\n\t\tvar arr = [];\n\n\t\tvar instances = this.instances();\n\n\t\tinstances = instances.filter(i => i.module.flags && i.module.flags.includes('mqttbroker'));\n\t\tfor (let com of instances)\n\t\t\tarr.push({ id: com.id, name: `${com.state.name} (${com.state.status})` });\n\n\t\tanswer(arr);\n\t};\n</script>\n\n<readme>\nMQTT Subscribe\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS footer > div > div { height: 16px; }\n\t.CLASS footer b { float: right; margin-left: 12px; }\n</style>\n\n<script>\n\tON('configure_mqttsubscribe', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%brokers', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.broker__dirsource:%brokers;dirraw:1;placeholder:Select broker;dirempty:No broker;required:1\" class=\"m\"><b>Broker</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<div data---=\"input__?.topic__placeholder:devices/status;required:1\" class=\"m\"><b>Topic</b></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<p>\n\t\t\t\t\t<b>The topic supports wildcards like:</b><br>\n\t\t\t\t\t- devices/+/status -> devices/1/status or devices/123456/status etc.<br>\n\t\t\t\t\t- devices/#        -> any topic begining with devices/.......\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__template__show\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><b>{{ value.status }}</b>Status</div>\n\t\t\t\t<div><b>{{ value.topic }}</b>Topic</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>",
			"cl6vzad0ba": "<script total>\n\n\texports.name = 'AlpineJs';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Alpine';\n\texports.version = '1';\n\texports.group = 'Templates';\n\texports.config = {template: `\n\t<html>\n\t<head>\n\t\t<script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"><\\/script>\n\t</head>\n\t<body>\n\t\t<h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n\t\t<div x-data=\"{ count: 0 }\">\n\t\t<button x-on:click=\"count++\">Increment</button>\n\n\t\t<span x-text=\"count\"></span>\n\t</div>\n\t</body>\n\t</html>\n\t`};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\t\tvar template;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\ttry {\n\t\t\t\t$.data = template(data, $);\n\t\t\t} catch(e) { $.data = ''; }\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttemplate = Tangular.compile(config.template || '');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nUses server-side implementation of [Tangular](https://docs.totaljs.com/components/40d06002lm50c/)\n**Example:**\nIncomming data\n```js\n{\n\tapp_name: 'Total.js Flow'\n}\n```\nTemplate\n```\nApp name: {{ app_name }}\n```\n\n$ --> {MessageInstance} https://docs.totaljs.com/total4/40844001ni51c/\nIn the example bellow, the $.refs.controller is only available if the message was created by the Route component\n```\nURL: {{ $.refs.controller.url }}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Template:</div>\n\t\t<div data---=\"codemirror__?.template__type:html;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<script>\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"dataset": "<script total>\n\n\texports.id = 'dataset';\n\texports.name = 'CSV Dataset';\n\texports.group = 'Dashboard';\n\texports.version = '2';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Peter Širka';\n\texports.config = { name: '', unit: '', icon: '', color: '', decimals: 2, type: 'daily', sum: 0 };\n\texports.inputs = [{ id: 'input', name: 'Value' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar uid = (instance.main.id + '_' + instance.id).makeid();\n\t\tvar filename_meta = PATH.private('dataset_' + uid + '.meta');\n\t\tvar filename_data = PATH.private('dataset_' + uid + '.csv');\n\t\tvar meta = {};\n\n\t\tvar updatestatus = function() {\n\t\t\tinstance.status({ id: uid, keys: meta.keys });\n\t\t};\n\n\t\tF.Fs.readFile(filename_meta, function(err, response) {\n\t\t\tmeta = response ? response.toString('utf8').parseJSON(true) : CLONE(config);\n\t\t\tif (!meta.keys)\n\t\t\t\tmeta.keys = {};\n\t\t\tmeta.id = uid;\n\t\t\tupdatestatus();\n\t\t\tF.Fs.lstat(filename_data, function(err) {\n\t\t\t\tif (err)\n\t\t\t\t\tF.Fs.appendFile(filename_data, 'key,value,min,max,sum,count,tshour,tsday,tsweek,tsmonth,tsyear\\n', NOOP);\n\t\t\t});\n\t\t});\n\n\t\tinstance.close = function(removed) {\n\t\t\tif (removed) {\n\t\t\t\tF.Fs.unlink(filename_meta, NOOP);\n\t\t\t\tF.Fs.unlink(filename_data, NOOP);\n\t\t\t\tdb = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.insert = function(data) {\n\n\t\t\tvar writer = null;\n\t\t\tvar write = false;\n\t\t\tvar key = data.key || data.id || 'Value';\n\n\t\t\tif (!meta.keys[key])\n\t\t\t\tmeta.keys[key] = {};\n\n\t\t\tvar tmp = meta.keys[key];\n\n\t\t\tif (tmp.count && config.type !== 'lastvalue' && config.type !== 'logger') {\n\t\t\t\tvar date = tmp.date;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'hourly':\n\t\t\t\t\t\twrite = date.getHours() !== NOW.getHours();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'daily':\n\t\t\t\t\t\twrite = date.getDate() !== NOW.getDate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'monthly':\n\t\t\t\t\t\twrite = date.getMonth() !== NOW.getMonth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'weekly':\n\t\t\t\t\t\twrite = date.format('w') !== NOW.format('w');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'yearly':\n\t\t\t\t\t\twrite = date.getFullYear() !== NOW.getFullYear();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (write) {\n\t\t\t\twriter = {};\n\t\t\t\twriter.key = key;\n\t\t\t\twriter.value = tmp.value;\n\t\t\t\twriter.min = tmp.min;\n\t\t\t\twriter.max = tmp.max;\n\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\twriter.count = tmp.count;\n\t\t\t\twriter.date = tmp.date;\n\t\t\t}\n\n\t\t\ttmp.date = NOW;\n\t\t\ttmp.value = data.value;\n\n\t\t\tif (writer) {\n\n\t\t\t\ttmp.min = tmp.value;\n\t\t\t\ttmp.max = tmp.value;\n\t\t\t\ttmp.count = 0;\n\n\t\t\t\tif (config.sum) {\n\t\t\t\t\tif (config.sum === 1)\n\t\t\t\t\t\ttmp.sum = tmp.value;\n\t\t\t\t\telse\n\t\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif (tmp.min == null || tmp.value < tmp.min)\n\t\t\t\t\ttmp.min = tmp.value;\n\n\t\t\t\tif (tmp.max == null || tmp.value > tmp.max)\n\t\t\t\t\ttmp.max = tmp.value;\n\n\t\t\t\tif (config.sum)\n\t\t\t\t\ttmp.sum = (tmp.sum || 0) + tmp.value;\n\n\t\t\t\tif (config.type === 'logger') {\n\t\t\t\t\twriter = {};\n\t\t\t\t\twriter.key = key;\n\t\t\t\t\twriter.value = tmp.value;\n\t\t\t\t\twriter.min = tmp.min;\n\t\t\t\t\twriter.max = tmp.max;\n\t\t\t\t\twriter.sum = tmp.sum;\n\t\t\t\t\twriter.count = (tmp.count || 0) + 1;\n\t\t\t\t\twriter.date = tmp.date;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttmp.count = (tmp.count || 0) + 1;\n\n\t\t\tupdatestatus();\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\n\t\t\tif (!writer)\n\t\t\t\treturn;\n\n\t\t\tvar values = [];\n\n\t\t\t// 0 key\n\t\t\t// 1 value\n\t\t\t// 2 min\n\t\t\t// 3 max\n\t\t\t// 4 sum\n\t\t\t// 5 count\n\t\t\t// 6 tsh\n\t\t\t// 7 tsd\n\t\t\t// 8 tsw\n\t\t\t// 9 tsm\n\t\t\t// 10 tsy\n\n\t\t\tvar ts = writer.date.format('yyyyMMddHH');\n\n\t\t\tvalues.push(writer.key);\n\t\t\tvalues.push(writer.value + '');\n\t\t\tvalues.push((writer.min != null ? writer.min : '') + '');\n\t\t\tvalues.push((writer.max != null ? writer.max : '') + '');\n\t\t\tvalues.push((writer.sum != null ? writer.sum : '') + '');\n\t\t\tvalues.push((writer.count != null ? writer.count : '') + '');\n\t\t\tvalues.push(ts);\n\t\t\tvalues.push(ts.substring(0, 8));\n\t\t\tvalues.push(writer.date.format('yyyyww'));\n\t\t\tvalues.push(ts.substring(0, 6));\n\t\t\tvalues.push(ts.substring(0, 4));\n\n\t\t\tF.Fs.appendFile(filename_data, values.join(',') + '\\n', NOOP);\n\t\t};\n\n\t\tvar updatefile = function(fn) {\n\t\t\tF.Fs.readFile(filename_data, function(err, data) {\n\t\t\t\tvar lines = data.toString('utf8').split('\\n');\n\t\t\t\tfn(lines);\n\t\t\t\tF.Fs.writeFile(filename_data, lines.join('\\n'), NOOP);\n\t\t\t});\n\t\t};\n\n\t\tinstance.trigger = function(msg) {\n\t\t\tif (msg.type === 'remove') {\n\t\t\t\t// msg.key\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines.splice(counter, 1);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (msg.type === 'rename') {\n\t\t\t\t// msg.key\n\t\t\t\t// msg.name\n\t\t\t\tmeta.keys[msg.name] = meta.keys[msg.key];\n\t\t\t\tdelete meta.keys[msg.key];\n\t\t\t\tupdatestatus();\n\t\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t\t\tupdatefile(function(lines) {\n\t\t\t\t\tvar counter = 0;\n\t\t\t\t\tvar key = msg.key + ',';\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tvar line = lines[counter];\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tif (line.substring(0, key.length) === key)\n\t\t\t\t\t\t\tlines[counter] = msg.name + ',' + line.substring(key.length);\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar type = typeof(data);\n\n\t\t\tif (type === 'number')\n\t\t\t\tdata = { value: data };\n\n\t\t\tinstance.insert(CLONE(data));\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tCOPY(config, meta);\n\t\t\tF.Fs.writeFile(filename_meta, JSON.stringify(meta, null, '\\t'), NOOP);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS hr { margin: 10px 0; }\n\t.CLASS [contenteditable] { outline: 0 }\n\t.CLASS .padding { padding: 10px; font-size: 12px; }\n\t.CLASS .padding .meta { height: 16px; font-size: 11px; }\n\t.CLASS .padding .meta span { color: #888; margin-right: 5px; width: 30px; float: left; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.name__required:1;placeholder:Dataset name\">Name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__dirsource:lastvalue|Last value only,logger|Logger,hourly|Hourly,daily|Daily,weekly|Weeekly,monthly|Monthly,yearly|Yearly;required:1\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.sum__dirsource:0|Disabled,1|Periodical sum,2|Total sum;type:number\">Calculate the sum</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.unit__align:1\">Unit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.decimals__align:1;type:number__2\">Decimals</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t</div>\n</settings>\n\n<readme>\nThe component stores data as CSV Dataset for e.g. Dashboard application. Dataset is stored in `/private/` path that is available with the help of the Flow access token.\n\nCSV file contains only processed values (according to the period) and the `.meta` file contains meta data + last value.\n\n```js\n{\n\tkey: String,    // optional, e.g. device_id | device_name\n\tvalue: Number   // measured value\n}\n```\n\n### CSV columns\n\n1. `key {String}`\n1. `value {Number}`\n1. `min {Number}`\n1. `max {Number}`\n1. `sum {Number}`\n1. `count {Number}`\n1. `tshour {Number}`in the form `yyyyMMddhh`\n1. `tsday {Number}` in the form `yyyyMMdd`\n1. `tsweek {Number}` in the form `yyyyww`\n1. `tsmonth {Number}` in the form `yyyyMM`\n1. `tsyear {Number}` in the form `yyyy`\n</readme>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar laststatus;\n\n\t\texports.configure = function(config, isinit) {\n\t\t\tif (!isinit) {\n\t\t\t\texports.status(laststatus);\n\t\t\t\texports.rebind('status');\n\t\t\t}\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t\tif (status) {\n\t\t\t\tstatus.type = exports.config.type;\n\t\t\t\tfor (var key in status.keys)\n\t\t\t\t\tstatus.keys[key].unit = exports.config.unit;\n\t\t\t}\n\t\t};\n\n\t\texports.rename = function(meta, next) {\n\n\t\t\tvar id = ATTRD(meta.element);\n\t\t\tvar value = meta.value.replace(/\\\"|\\,/g, '');\n\n\t\t\tif (id !== value) {\n\t\t\t\tnext(false);\n\t\t\t\t// Due to \"enter\" key\n\t\t\t\tsetTimeout(ASETTER('approve/show', 'Are you sure you want to rename \"{0}\" to <b>\"{1}\"</b>?'.format(id, value), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\t\texports.trigger({ type: 'rename', key: id, name: value });\n\t\t\t\t\tnext(value);\n\t\t\t\t}), 200);\n\t\t\t} else\n\t\t\t\tnext(false);\n\n\t\t};\n\n\t\texports.click = function(el) {\n\t\t\tvar id = ATTRD(el);\n\t\t\tSETTER('approve/show', 'Are you sure you want to remove selected key <b>\"{0}\"</b>?'.format(id.encode()), '\"fa fa-trash-alt\" Remove', function() {\n\t\t\t\texports.trigger({ type: 'remove', key: id });\n\t\t\t});\n\t\t};\n\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"padding\">\n\t\t\t<div data-bind=\"CONFIG__template\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<span class=\"badge badge-medium badge-color mr5\">{{ value.type }}</span> {{ if value.icon }}<i class=\"{{ value.icon }} mr5\"></i>{{ fi }}<b>{{ value.name }}</b>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div data-bind=\"STATUS__template__show\" class=\"keys hidden\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t\t<div class=\"meta mt5\">\n\t\t\t\t\t\t\t<span>Meta:</span><div><a href=\"/private/?filename=dataset_{{ value.id }}.meta&token=\" target=\"_blank\">dataset_{{ value.id }}.meta</a></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ if value.type !== 'lastvalue' }}\n\t\t\t\t\t\t<div class=\"meta\">\n\t\t\t\t\t\t\t<span>Data:</span><div><a href=\"/private/?filename=dataset_{{ value.id }}.csv&token=\" target=\"_blank\">dataset_{{ value.id }}.csv</a></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ fi }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div class=\"selectable\">\n\t\t\t\t\t{{ foreach m in value.keys }}\n\t\t\t\t\t\t<div class=\"keyvalue small\" data-id=\"{{ m.key }}\">\n\t\t\t\t\t\t\t<span><i class=\"fa fa-trash-alt red clickable\"></i><b class=\"edit\" data-edit=\"required:1;offsetWidth:150;exec:TOUCH.rename\" data-id=\"{{ m.key }}\">{{ m.key }}</b></span>\n\t\t\t\t\t\t\t<div class=\"right\">{{ m.value.value }} {{ m.value.unit }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t\t</div>\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"c5gkf94a71": "<script total>\n  exports.name = \"Aedes Broker\";\n  exports.icon = \"fa fa-code\";\n  exports.author = \"Total.js\";\n  exports.version = \"1\";\n  exports.group = \"Common\";\n  exports.config = {};\n\n  exports.npm = [\"aedes\", \"aedes@^0.48.1\"];\n  // exports.meta = { readonly: false, singleton: false, hidden: false };\n\n  exports.make = function (instance, config) {\n    const aedes = require(\"aedes\")();\n    const server = require(\"net\").createServer(aedes.handle);\n    const httpServer = require(\"http\").createServer();\n    const ws = require(\"websocket-stream\");\n    MQTT_Port = 1884;\n    const wsPort = 8884;\n    server.listen(MQTT_Port, function () {\n      console.log(\"Aedes MQTT server started and listening on port\", MQTT_Port);\n    }),\n      ws.createServer({ server: httpServer }, aedes.handle);\n    httpServer.listen(wsPort, function () {\n      console.log(\"websocket server listening on port \", wsPort);\n    });\n\n    instance.message = function ($) {\n      var data = $.data;\n      $.send(\"output\", data);\n      // or $.destroy();\n    };\n\n    instance.configure = function () {\n      // \"config\" is changed\n    };\n\n    instance.close = function () {\n      // this instance is closed\n    };\n\n    instance.variables = function (variables) {\n      // FlowStream variables are changed\n    };\n\n    instance.variables2 = function (variables) {\n      // Global variables are changed\n    };\n\n    instance.configure();\n  };\n</script>\n\n<readme> Markdown readme ```js var total = 'Hello world!'; ``` </readme>\n\n<settings>\n  <div class=\"padding\">SETTINGS for this component (optional)</div>\n</settings>\n\n<style>\n  .CLASS footer {\n    padding: 10px;\n    font-size: 12px;\n  }\n</style>\n\n<body>\n  <header><i class=\"ICON\"></i>NAME</header>\n  <footer>\n    <div>\n      <div>MQTT: <b>1884</b></div>\n      <div>WS: <b>8884</b></div>\n    </div>\n  </footer>\n</body>\n",
			"c6n88cff3b": "<script total>\n  exports.name = \"Your component name\";\n  exports.icon = \"fa fa-code\";\n  exports.author = \"Total.js\";\n  exports.version = \"1\";\n  exports.group = \"Common\";\n  exports.config = {};\n  exports.inputs = [{ id: \"input\", name: \"Input\" }];\n  exports.outputs = [{ id: \"output\", name: \"Output\" }];\n\n  exports.npm = [\"aedes\", \"aedes@^0.48.1\"];\n  // exports.meta = { readonly: false, singleton: false, hidden: false };\n\n  exports.make = function (instance, config) {\n    const aedes = require(\"aedes\")();\n    const server = require(\"net\").createServer(aedes.handle);\n    const httpServer = require(\"http\").createServer();\n    const ws = require(\"websocket-stream\");\n    MQTT_Port = 1884;\n    const wsPort = 8884;\n    server.listen(MQTT_Port, function () {\n      console.log(\"Aedes MQTT server started and listening on port\", MQTT_Port);\n    }),\n      ws.createServer({ server: httpServer }, aedes.handle);\n    httpServer.listen(wsPort, function () {\n      console.log(\"websocket server listening on port \", wsPort);\n    });\n\n    instance.message = function ($) {\n      var data = $.data;\n      $.send(\"output\", data);\n      // or $.destroy();\n    };\n\n    instance.configure = function () {\n      // \"config\" is changed\n    };\n\n    instance.close = function () {\n      // this instance is closed\n    };\n\n    instance.variables = function (variables) {\n      // FlowStream variables are changed\n    };\n\n    instance.variables2 = function (variables) {\n      // Global variables are changed\n    };\n\n    instance.configure();\n  };\n</script>\n\n<readme> Markdown readme ```js var total = 'Hello world!'; ``` </readme>\n\n<settings>\n  <div class=\"padding\">SETTINGS for this component (optional)</div>\n</settings>\n\n<style>\n  .CLASS footer {\n    padding: 10px;\n    font-size: 12px;\n  }\n</style>\n\n<body>\n  <header><i class=\"ICON\"></i>NAME</header>\n  <footer>Learn from existing components</footer>\n</body>\n"
		},
		"design": {
			"ilcvnodox": {
				"id": "ilcvnodox",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 598.9749908447266,
				"y": 161.97500610351562,
				"component": "cn63q37bcd",
				"connections": {
					"output": [
						{
							"id": "ilcvnoff0",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvnoff0": {
				"id": "ilcvnoff0",
				"config": {
					"outputs": 1,
					"code": "// instance {FlowStreamInstance};\n// $ {FlowStreamMessage};\n// vars {Object};\n// repo {Object};\n// data {String/Number/Boolean/Date/Buffer/Object};\n// $.send('output', data); // or simply send(data); which uses the first output\n// $.destroy();\n// $.throw(err);\n\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n\n$.send('output', \"Hello World!\");"
				},
				"x": 792.9750061035156,
				"y": 195.97500610351562,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilcvnoiu9",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvnoiu9": {
				"id": "ilcvnoiu9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1026.993667602539,
				"y": 212.9812355041504,
				"component": "cnui432a79",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvnvffg": {
				"id": "ilcvnvffg",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"interval": 1000
				},
				"x": 611.0000152587891,
				"y": 293,
				"component": "co7g09ff86",
				"connections": {
					"output": [
						{
							"id": "ilcvnwb02",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "far fa-clock-o",
					"group": "Triggers",
					"name": "Timer",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvnwb02": {
				"id": "ilcvnwb02",
				"config": {
					"outputs": 1,
					"code": "const speed = (Math.random() + 50).toFixed(2) + ' km/h';\nconst longitude = (20 + Math.random()).toFixed(6);\nconst latitude = (50 + Math.random()).toFixed(6);\nconst charge = (20 + (Math.random() * 20)).toFixed(1)+'%';\nconst dataToSend = {speed, position: {longitude, latitude}, state: {charge}};\nconst dataString = JSON.stringify(dataToSend)\n$.send('output', dataToSend);"
				},
				"x": 816.0000305175781,
				"y": 350,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilcvnwfd4",
							"index": "input"
						},
						{
							"id": "ilcvo2w3r",
							"index": "input"
						},
						{
							"id": "ilcvota2z",
							"index": "data"
						},
						{
							"id": "ilcx2jk6y",
							"index": "input"
						},
						{
							"id": "ilcx6tz9n",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvnwfd4": {
				"id": "ilcvnwfd4",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1318.96484375,
				"y": 218.984375,
				"component": "cnui432a79",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvo2w3r": {
				"id": "ilcvo2w3r",
				"config": {
					"paths": {
						"speed": "speed",
						"longitude": "position.longitude",
						"latitude": "position.latitude",
						"charge": "state.charge"
					},
					"interval": 1000,
					"format": "dd.MM.yyyy HH:mm:ss",
					"extend": true
				},
				"x": 1323.984375,
				"y": 658.984375,
				"component": "c2skhf5f0f",
				"connections": {},
				"template": {
					"icon": "fa fa-rss-square",
					"group": "Common",
					"name": "Telemetry",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvota2z": {
				"id": "ilcvota2z",
				"config": {
					"name": "data_output",
					"readme": ""
				},
				"x": 1322.98828125,
				"y": 580.9765625,
				"component": "ce61x806ce",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ilcvotvmd": {
				"id": "ilcvotvmd",
				"config": {
					"name": "",
					"id": "fxa63001tu41d_ilcvota2z"
				},
				"x": 920.99609375,
				"y": 970.99609375,
				"component": "ce96c043e",
				"connections": {
					"data": [
						{
							"id": "ilcvoutuf",
							"index": "input"
						},
						{
							"id": "ilcw9pxbc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input2",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Subscribe",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"ilcvoutuf": {
				"id": "ilcvoutuf",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1319.98046875,
				"y": 845.9765625,
				"component": "cnui432a79",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvq7k4x": {
				"id": "ilcvq7k4x",
				"config": {
					"url": "/test/{name}",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"send": "all"
				},
				"x": 596.9921875,
				"y": 1259.98046875,
				"component": "c6n8c4704c",
				"connections": {
					"output": [
						{
							"id": "ilcvqmhjy",
							"index": "input"
						},
						{
							"id": "ilcvqvm6g",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-road",
					"group": "REST API",
					"name": "Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvqmhjy": {
				"id": "ilcvqmhjy",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 939.98046875,
				"y": 1275,
				"component": "cmahv5f172",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"ilcvqtnxl": {
				"id": "ilcvqtnxl",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1039.98046875,
				"y": 1429.98046875,
				"component": "cnui432a79",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvqvm6g": {
				"id": "ilcvqvm6g",
				"config": {
					"outputs": 1,
					"code": "const datas = {\n\t\"query\": $.data.query,\n\t\"params\": $.data.params,\n\t\"body\": $.data.body\n}\n\n$.send('output', datas)"
				},
				"x": 830.9765625,
				"y": 1407.98828125,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilcvqtnxl",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvrjc06": {
				"id": "ilcvrjc06",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1054.47265625,
				"y": 1573.4765625,
				"component": "cnui432a79",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvrjc07": {
				"id": "ilcvrjc07",
				"config": {
					"outputs": 1,
					"code": "const datas = {\n\t\"query\": $.data.query,\n\t\"params\": $.data.params,\n\t\"body\": $.data.body\n}\n\n$.send('output', datas)"
				},
				"x": 855.48828125,
				"y": 1543.4765625,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilcvrjc06",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcvrlpt6": {
				"id": "ilcvrlpt6",
				"config": {
					"type": "html",
					"code": 200
				},
				"x": 1060.48828125,
				"y": 1701.484375,
				"component": "cmahv5f172",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"ilcvs0tsw": {
				"id": "ilcvs0tsw",
				"config": {
					"url": "https://jsonplaceholder.typicode.com/todos/1",
					"method": "GET",
					"dnscache": true,
					"insecure": false,
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "all"
				},
				"x": 846.97265625,
				"y": 1862.98828125,
				"component": "c0qtib79af",
				"connections": {
					"response": [
						{
							"id": "ilcvs1xp7",
							"index": "input"
						},
						{
							"id": "ilcw9ngvb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "ti ti-cloud-download",
					"group": "Common",
					"name": "Request",
					"inputs": [
						{
							"id": "payload",
							"name": "Payload"
						}
					],
					"outputs": [
						{
							"id": "response",
							"name": "Response"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"ilcvs1xp7": {
				"id": "ilcvs1xp7",
				"config": {
					"repo": true,
					"data": true
				},
				"x": 1169.98046875,
				"y": 2010.9765625,
				"component": "cnui432a79",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcvs2kko": {
				"id": "ilcvs2kko",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 1381.58203125,
				"y": 1871.58203125,
				"component": "cmahv5f172",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"ilcw7ooj5": {
				"id": "ilcw7ooj5",
				"config": {
					"url": "/test/1",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "html"
				},
				"x": 601.97265625,
				"y": 2280.99609375,
				"component": "csjku55f5c",
				"connections": {
					"output": [
						{
							"id": "ilcw9hiac",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcw7ym9m": {
				"id": "ilcw7ym9m",
				"config": {
					"url": "/custom",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "html"
				},
				"x": 604.98046875,
				"y": 1860.9765625,
				"component": "csjku55f5c",
				"connections": {
					"output": [
						{
							"id": "ilcvs0tsw",
							"index": "payload"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcw9hiac": {
				"id": "ilcw9hiac",
				"config": {
					"template": "\n\t<html>\n\t<head>\n\t\t<script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n\t\t<div x-data=\"{ count: 0 }\">\n\t\t<button x-on:click=\"count++\">Increment</button>\n\n\t\t<span x-text=\"count\"></span>\n\t</div>\n\t</body>\n\t</html>\n\t"
				},
				"x": 848.984375,
				"y": 2282.98828125,
				"component": "cl6vzad0ba",
				"connections": {
					"output": [
						{
							"id": "ilcy4c4w6",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Templates",
					"name": "AlpineJs",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcw9j8g4": {
				"id": "ilcw9j8g4",
				"config": {
					"url": "/test",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "html"
				},
				"x": 603.4765625,
				"y": 2142.4609375,
				"component": "csjku55f5c",
				"connections": {
					"output": [
						{
							"id": "ilcw9j8g5",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcw9j8g5": {
				"id": "ilcw9j8g5",
				"config": {
					"template": "<html>\n  <head>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css\"\n    />\n    <script src=\"https://unpkg.com/@alpinejs/persist@3.x.x/dist/cdn.min.js\"></script>\n    <script\n      defer\n      src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"\n    ></script>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://unpkg.com/mqtt/dist/mqtt.min.js\"></script>\n  </head>\n  <body>\n    <h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n    <div x-data=\"{ count: $persist({{query.data}})}\">\n      <button x-on:click=\"count++\">Increment</button>\n      <span x-text=\"count\"></span>\n      <a href=\"/test/1\">Go</a>\n    </div>\n    <table\n      x-data=\"{ users: [] }\"\n      x-init=\"fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response => response.json())\n         .then(data => users = data)\"\n      class=\"table is-bordered bg-primary is-centered mt-6 mx-auto\"\n    >\n      <thead>\n        <tr>\n          <th class=\"has-background-link-light has-text-link\">ID</th>\n          <th class=\"has-background-link-light has-text-link\">Username</th>\n          <th class=\"has-background-link-light has-text-link\">Name</th>\n          <th class=\"has-background-link-light has-text-link\">Phone</th>\n          <th class=\"has-background-link-light has-text-link\">Location</th>\n          <th class=\"has-background-link-light has-text-link\">Company Name</th>\n          <th class=\"has-background-link-light has-text-link\">Website</th>\n        </tr>\n      </thead>\n      <tbody>\n        <template x-for=\"user in users\" :key=\"user.id\">\n          <tr>\n            <td x-text=\"user.id\" class=\"has-text-link-dark\"></td>\n            <td x-text=\"user.username\"></td>\n            <td x-text=\"user.name\"></td>\n            <td x-text=\"user.phone\"></td>\n            <td x-text=\"user.address.city\"></td>\n            <td x-text=\"user.company.name\"></td>\n            <td x-text=\"user.website\"></td>\n          </tr>\n        </template>\n      </tbody>\n    </table>\n    <div x-data=\"{ data: {{query.data }}}\">\n      <span x-text=\"data\"></span>\n    </div>\n    <div x-data=\"mqtt\">\n      <h1 class=\"bg-blue-300 hover:bg-blue-500 text-2xl font-bold\" id=\"test\"></h1>\n    </div>\n\n    <script type=\"text/javascript\">\n      document.addEventListener(\"alpine:init\", () => {\n        var testData;\n        var byId = function (id) {\n          return document.getElementById(id);\n        };\n        Alpine.data(\"mqtt\", () => ({\n          textData: \"halo\",\n          init() {\n            this.mqttConnect();\n          },\n          mqttConnect() {\n            const url = \"ws://localhost:8884/mqtt\";\n\n            const options = {\n              // Clean session\n              clean: true,\n              connectTimeout: 4000,\n              // Authentication\n              clientId: \"emqx_test\",\n            };\n            const client = mqtt.connect(url, options);\n            client.on(\"connect\", function () {\n              console.log(\"Connected\");\n              // Subscribe to a topic\n              client.subscribe(\"some/topic\");\n              client.subscribe(\"test\", function (err) {\n                if (!err) {\n                  // Publish a message to a topic\n                  // client.publish(\"test\", \"Hello mqtt\");\n                }\n              });\n            });\n\n            // Receive messages\n            client.on(\"message\", function (topic, message) {\n              // message is Buffer\n              console.log(message.toString());\n              localStorage.setItem(\"data_test\", message.toString());\n              byId(\"test\").innerHTML = localStorage.getItem(\"data_test\");\n\n              // client.end();\n            });\n          },\n        }));\n      });\n    </script>\n  </body>\n</html>"
				},
				"x": 839.4921875,
				"y": 2142.48046875,
				"component": "cl6vzad0ba",
				"connections": {
					"output": [
						{
							"id": "ilcy4c4w6",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Templates",
					"name": "AlpineJs",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcw9ngvb": {
				"id": "ilcw9ngvb",
				"config": {
					"template": "<html>\n\t<head>\n\t\t<script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n\t\t<div x-data=\"{ count: 0 }\">\n\t\t<button x-on:click=\"count++\">Increment</button>\n\n\t\t<span x-text=\"count\"></span>\n\t\t<p>user id: {{body.userId}}</p>\n\t\t<p>id: {{body.id}}</p>\n\t\t<p>title: {{body.title}}</p>\n\t</div>\n\t</body>\n\t</html>"
				},
				"x": 1170.46875,
				"y": 1844.4921875,
				"component": "cl6vzad0ba",
				"connections": {
					"output": [
						{
							"id": "ilcvs2kko",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Templates",
					"name": "AlpineJs",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcw9pxbb": {
				"id": "ilcw9pxbb",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 1510.37109375,
				"y": 1153.37890625,
				"component": "cmahv5f172",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"ilcw9pxbc": {
				"id": "ilcw9pxbc",
				"config": {
					"template": "<html>\n\t<head>\n\t\t<script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n\t\t<div x-data=\"{ count: 0 }\">\n\t\t<button x-on:click=\"count++\">Increment</button>\n\n\t\t<span x-text=\"count\"></span>\n\t\t<p>user id: {{body.userId}}</p>\n\t\t<p>id: {{body.id}}</p>\n\t\t<p>title: {{body.title}}</p>\n\t</div>\n\t</body>\n\t</html>"
				},
				"x": 1320.78125,
				"y": 1129.78515625,
				"component": "cl6vzad0ba",
				"connections": {
					"output": [
						{
							"id": "ilcw9pxbb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Templates",
					"name": "AlpineJs",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcwag0x8": {
				"id": "ilcwag0x8",
				"config": {
					"url": "/test2",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "custom"
				},
				"x": 599.4921875,
				"y": 1512.48046875,
				"component": "csjku55f5c",
				"connections": {
					"output": [
						{
							"id": "ilcvrjc07",
							"index": "input"
						},
						{
							"id": "ilcwalwx8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcwalwx8": {
				"id": "ilcwalwx8",
				"config": {
					"template": "\n\t<html>\n\t<head>\n\t\t<script defer src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<h1 x-data=\"{ message: 'I ❤️ Alpine' }\" x-text=\"message\"></h1>\n\t\t<div x-data=\"{ count: 0 }\">\n\t\t<button x-on:click=\"count++\">Increment</button>\n\n\t\t<span x-text=\"count\"></span>\n\t</div>\n\t</body>\n\t</html>\n\t"
				},
				"x": 848.984375,
				"y": 1673.984375,
				"component": "cl6vzad0ba",
				"connections": {
					"output": [
						{
							"id": "ilcvrlpt6",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "Templates",
					"name": "AlpineJs",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcx2jk6y": {
				"id": "ilcx2jk6y",
				"config": {
					"outputs": 1,
					"code": "let dataString = JSON.stringify(data);\n\nlet datas = {\n    topic: 'some/topic',\n    message: dataString,\n    // optional\n    options: {\n        qos: 0|1|2,\n        retain: true|false\n    }\n}\n\n$.send('output', datas);"
				},
				"x": 969.98046875,
				"y": 568.96484375,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilcxfm0py",
							"index": "message"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcx6tz9n": {
				"id": "ilcx6tz9n",
				"config": {
					"repo": false,
					"data": true,
					"name": "Debug"
				},
				"x": 1320,
				"y": 456.9921875,
				"component": "cnsojb6b6",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Debug",
					"inputs": [
						{
							"id": "input",
							"name": "Log window"
						}
					]
				}
			},
			"ilcxfazm0": {
				"id": "ilcxfazm0",
				"config": {
					"host": "localhost",
					"port": 1884,
					"portws": 8884,
					"secure": false,
					"name": "[MQTT] localhost:1884"
				},
				"x": 596.97265625,
				"y": 15.99609375,
				"component": "ctatxfa4c4",
				"connections": {},
				"template": {
					"icon": "fa fa-exchange-alt",
					"group": "MQTT",
					"name": "MQTT Broker",
					"outputs": [
						{
							"id": "output",
							"name": "Messages"
						}
					]
				}
			},
			"ilcxfm0py": {
				"id": "ilcxfm0py",
				"config": {
					"broker": "ilcxfazm0"
				},
				"x": 1144.9609375,
				"y": 735.9765625,
				"component": "mqttpublish",
				"connections": {},
				"template": {
					"icon": "fa fa-sign-out",
					"group": "MQTT",
					"name": "MQTT Publish",
					"inputs": [
						{
							"id": "message",
							"name": "Message"
						}
					]
				}
			},
			"ilcy4b2uz": {
				"id": "ilcy4b2uz",
				"config": {
					"type": "plain",
					"code": 200
				},
				"x": 589.25,
				"y": 2013,
				"component": "cmahv5f172",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"ilcy4c4w6": {
				"id": "ilcy4c4w6",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 1063,
				"y": 2240,
				"component": "cmahv5f172",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"groups": []
		},
		"variables": {},
		"sources": {},
		"proxypath": "/abdul/",
		"origin": "http://localhost:8000",
		"dtcreated": "2023-01-14T07:27:27.904Z",
		"size": 122264
	}
}